{"name":"configureLoadoutsScene","type":"script","scope":"global","author":"enbSZFWzu5dUH8Ji","img":"icons/svg/dice-target.svg","command":"const currentScene = game.scenes.current\n\nconst loadoutsTileDialog = new Dialog({\n    title: \"Define Loadouts Scene Options\",\n    content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Loadouts Name</label>\n        <input type='text' placeholder='Leave empty to use Foundry scene name' name='loadoutsName'></input>\n      </div>\n    </form>\n    `,\n      buttons: {\n        cancel: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Cancel`,\n            callback: function(){ return; }  \n            },\n            apply: {\n                icon: \"<i class='fas fa-check'></i>\",\n                label: `Apply`,\n                callback: html => {setupLoadoutsScene(\n                    html.find('[name=\"loadoutsName\"]').val(),\n                    html.find('[name=\"weightSelect\"]').val()\n                    ) }\n                }\n      },\n      default: 'cancel'\n}).render(true);\n\nasync function setupLoadoutsScene(loadoutsName, loadoutsWeight){\n    currentScene.update({\n        \"flags.loadouts\": {\n            \"isLoadoutsScene\": true,\n            \"name\": loadoutsName ? allowedTypes : null\n        }\n    })\n}","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.3NnuDk3pjoJOfcRM"}},"_stats":{"systemId":"cyberpunk-red-core","systemVersion":"v0.87.6","coreVersion":"10.303","createdTime":1690039193140,"modifiedTime":1693597644787,"lastModifiedBy":"enbSZFWzu5dUH8Ji"},"folder":null,"sort":0,"ownership":{"default":0,"enbSZFWzu5dUH8Ji":3},"_id":"4vi2X4EnfNHhQl8J"}
{"name":"configureLoadoutsTiles","type":"script","scope":"global","author":"enbSZFWzu5dUH8Ji","img":"icons/svg/dice-target.svg","command":"const loadoutsTileDialog = new Dialog({\n    title: \"Loadouts\", \n    content:`\n    <script type=\"text/javascript\">\n        function limitWeightLength(obj){\n            if (obj.value.length > 2){\n                obj.value = obj.value.slice(0,2); \n            }\n        }\n    </script>\n    <form class=\"form-horizontal\">\n    <fieldset>\n    \n    <!-- Form Name -->\n    <legend>Tile Configuration</legend>\n    \n    <div class=\"form-group\">\n      <label>Character Name</label>\n      <input type='text' name='characterName'></input>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"preferenceWeight\">Preference Weight</label>\n      <input type=\"number\" id=\"preferenceWeight\" name=\"preferenceWeight\" placeholder='0-99' min=\"0\" max=\"99\" oninput=\"limitWeightLength(this)\">\n    </div>\n    \n    <div class=\"form-group\">\n      <label>Allowed Item Types</label>\n      <input type='text' name='allowedItemTypes' placeholder=\"e.g. 'weapon,ammo'. Blank for all\"></input>\n    </div>\n\n    <div class=\"form-group\">\n      <label>Allowed Item Tags</label>\n      <input type='text' name='allowedItemTags' placeholder=\"e.g. 'my,custom,tags'. Blank for all\"></input>\n    </div>\n    \n    <div class=\"form-group\">\n      <label>Storage Name</label>\n      <input type='text' name='storageName' maxLength='50' placeholder=\"defaults to 'storage'\"></input>\n    </div>\n  \n    <label for=\"stateSelect\">Carried State</label>\n      <select name=\"stateSelect\">\n        <option value=\"carried\">carried</option>\n        <option value=\"local\">local</option>\n      </select>\n    </div>\n\n    </fieldset>\n    </form>\n    `,\n      buttons: {\n        cancel: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Cancel`,\n            callback: function(){ return; }  \n            },\n        apply: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Apply Changes` ,\n            callback: html => {setupLoadoutsTiles(\n                html.find('[name=\"characterName\"]').val(),\n                html.find('[name=\"preferenceWeight\"]').val(),\n                html.find('[name=\"allowedItemTypes\"]').val(),\n                html.find('[name=\"allowedItemTags\"]').val(),\n                html.find('[name=\"storageName\"]').val(),\n                html.find('[name=\"stateSelect\"]').val()\n            )}   \n            }\n      },\n      default: 'apply',\n}).render(true);\n\nfunction getCharacterActorId(characterName){\n    let matchingCharacters = game.actors.filter(actor => actor.name == characterName)\n    if(! matchingCharacters.length){\n        ui.notifications.error(\"Loadouts: unable to assign tile - no characters found with name \" + characterName + \". No changes were made to selected tile(s).\")\n        return;\n    } else if(matchingCharacters.length > 1) {\n        ui.notifications.error(\"Loadouts: multiple characters found with name \" + characterName + \". No changes were made to selected tile(s).\")\n        return;\n    } else {\n        return matchingCharacters[0].id;\n    }\n}\n\nasync function setupLoadoutsTiles(characterName, tileWeight, allowedTypes, allowedTags, storageName, tileState){\n    characterActorId = getCharacterActorId(characterName)\n    if((characterActorId == null) || (characterActorId == undefined)){\n        return;\n    }\n\n    canvas.tiles.controlled.forEach(tile => tile.document.update({\n        \"flags.loadouts\": {\n          \"name\": storageName,\n          \"owner\": characterActorId,\n          \"weight\": tileWeight,\n          \"allowed_types\": allowedTypes.trim() ? allowedTypes : null,\n          \"allowed_tags\": allowedTags.trim() ? allowedTags : null, \n          \"state\": tileState\n        }\n    }))\n\n    if(! game.scenes.current.flags.loadouts){\n        ui.notifications.warn(\"Loadouts: tile(s) configured, but the current scene is not flagged as a Loadouts scene. Ensure that the configureLoadoutsScene macro is run.\")\n    } else {\n        ui.notifications.info(\"Loadouts: tile(s) configured\")\n    }\n}","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.WhtWH3k6FMlt7smH"}},"_stats":{"systemId":"cyberpunk-red-core","systemVersion":"v0.87.6","coreVersion":"10.303","createdTime":1683244512534,"modifiedTime":1693597646983,"lastModifiedBy":"enbSZFWzu5dUH8Ji"},"folder":null,"sort":0,"ownership":{"default":0,"enbSZFWzu5dUH8Ji":3},"_id":"ft4y11y36NzLuN11"}
{"name":"configureLoadoutsItems","type":"script","scope":"global","author":"enbSZFWzu5dUH8Ji","img":"icons/svg/dice-target.svg","command":"let itemDropdown = \"\";\nconst loadoutsTypes = game.settings.get(\"loadouts\", \"loadouts-managed-item-types\")\n\nfor(const loadoutsType of loadoutsTypes.split(',')) {\n    itemDropdown +=\"<option disabled>\" + loadoutsType.toUpperCase() + \"</option>\"\n    var itemArray = game.items.filter(item => item.type == loadoutsType).sort((a, b) => a.name.localeCompare(b.name));\n    for (let i = 0; i < itemArray.length; i++) {\n        var isConfigured\n        if(itemArray[i].flags.loadouts){\n            if(itemArray[i].flags.loadouts.configured == true) {\n                isConfigured = \"&#x25C9;\"\n            } else {\n                isConfigured = \"&#x25CC;\"\n            }\n        } else {\n            isConfigured = \"&#x25CC;\"\n        };\n        itemDropdown += \"<option value='\" + itemArray[i].id + \"'>\" + itemArray[i].name + \" \" + isConfigured + \"</option>\";\n    };\n};\n\nnew Dialog({\n    // TODO: Increase select width to accomodate long item names\n    title: \"Loadouts Item Configuration\",\n    content: `\n    <form class=\"form-horizontal\">\n    <fieldset>\n    \n    <!-- Form Name -->\n    <legend>Item Selection</legend>\n     \n    <!-- Item Dropdown -->\n    <div class=\"form-group\">\n        <label for=\"selectedItems\" style='display:inline-block;'>Select Item</label>\n        <select id=\"selectedItems\" name=\"selectedItems\" multiple style='width:58%; margin:4px 1%; display:inline-block;'>` + itemDropdown + `</select>\n    </div>\n\n    </fieldset>\n    </form>\n\n    <form class=\"form-horizontal\">\n    <fieldset>\n    \n    <!-- Form Name -->\n    <legend>Appearance</legend>\n\n    <!-- Text input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"imagePath\">Image Path</label>\n      <div class=\"col-md-4\">\n      <input id=\"imagePath\" name=\"imagePath\" type=\"text\" value=\"modules/loadouts/artwork/items/air-pistol.webp\" class=\"form-control input-md\">\n      </div>\n    </div>\n    \n    <!-- Number input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"tokenWidth\">Token Width</label>  \n      <div class=\"col-md-4\">\n      <input id=\"tokenWidth\" name=\"tokenWidth\" type=\"text\" value=\"1\" maxlength=\"1\" oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\" class=\"form-control input-md\" required=\"\">\n      <span class=\"help-block\">In grid units, not px</span>  \n      </div>\n    </div>\n    \n    <!-- Number input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"tokenHeight\">Token Height</label>  \n      <div class=\"col-md-4\">\n      <input id=\"tokenHeight\" name=\"tokenHeight\" type=\"text\" maxlength=\"1\" oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\" value=\"1\" class=\"form-control input-md\" required=\"\">\n      <span class=\"help-block\">In grid units, not px</span>  \n      </div>\n    </div>\n\n    <!-- Range input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"tokenScale\">Token Scale</label>  \n      <div class=\"col-md-4\">\n      <input id=\"tokenScale\" name=\"tokenScale\" type=\"range\" min=\"0.1\" max=\"1\" step=\"0.1\" defaultValue=\"1\" value=\"1\" oninput=\"document.getElementById('rangeValLabel').innerHTML = this.value;\"></input>\n      <span class=\"help-block\">Scale: </span>\n      <em id=\"rangeValLabel\" style=\"font-style: normal;\">1</em>\n      </div>\n    </div>\n\n    <!-- Range input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"lockOrientation\">Lock Orientation</label>  \n      <div class=\"col-md-4\">\n      <input id=\"lockOrientation\" name=\"lockOrientation\" type=\"checkbox\"></input>\n      </div>\n    </div>\n\n    </fieldset>\n    </form>\n\n    <form class=\"form-horizontal\">\n    <fieldset>\n    \n    <!-- Form Name -->\n    <legend>Properties</legend>\n\n    <!-- Number input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"stackSize\">Stack Size</label>  \n      <div class=\"col-md-4\">\n      <input id=\"stackSize\" name=\"stackSize\" type=\"text\" maxlength=\"2\" oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\" value=\"1\" class=\"form-control input-md\" required=\"\">\n      <span class=\"help-block\">Maximum stack size</span>\n      </div>\n    </div>\n\n    <!-- Text input-->\n    <div class=\"form-group\">\n      <label class=\"col-md-4 control-label\" for=\"loadoutsTag\">Loadouts Tag</label>  \n      <div class=\"col-md-4\">\n      <input id=\"loadoutsTag\" name=\"loadoutsTag\" type=\"text\" maxlength=\"25\" oninput=\"this.value=this.value.replace(/[^0-9A-Za-z-.]/g,'');\" placeholder=null class=\"form-control input-md\">\n      <span class=\"help-block\">e.g. 'pistols' or 'healing-potions' </span>  \n      </div>\n    </div>\n    \n    </fieldset>\n    </form>\n    `,\n    buttons: {\n        cancel: {\n            label: \"Cancel\",\n            callback: () => {\n              return;\n            },\n        },\n        apply: {\n            label: \"Apply Settings\",\n            callback: (html) => configureLoadoutsItem(\n                html.find('[name=\"selectedItems\"]').val(),\n                html.find('[name=\"imagePath\"]').val(),\n                html.find('[name=\"tokenWidth\"]').val(),\n                html.find('[name=\"tokenHeight\"]').val(),\n                html.find('[name=\"tokenScale\"]',).val(),\n                html.find('[name=\"lockOrientation\"]',).val(),\n                html.find('[name=\"stackSize\"]').val(),\n                html.find('[name=\"loadoutsTag\"]').val() || null\n            )\n        },\n    }\n}).render(true);\n\nasync function setLoadoutsItemFlags(itemId, imagePath, tokenWidth, tokenHeight, tokenScale, lockOrientation, stackSize, loadoutsTag) {\n    // TODO: Ensure that the path exists before making any changes\n    console.log(\"Setting Loadouts item flags for \" + itemId)\n    const lockOrientationCheckbox = document.getElementById('lockOrientation');\n    await game.items.get(itemId).update({\n        flags: {\n            loadouts: {\n                configured: true,\n                img: imagePath,\n                width: parseInt(tokenWidth),\n                height: parseInt(tokenHeight),\n                scale: parseFloat(tokenScale),\n                orientationLock: lockOrientationCheckbox.checked,\n                stack: {max: parseInt(stackSize)},\n                loadoutsTag: loadoutsTag\n            }\n        }\n    });\n};\n\nasync function configureLoadoutsItem(itemIds, imagePath, tokenWidth, tokenHeight, tokenScale, lockOrientation, stackSize, loadoutsTag) {\n    console.log(\"Configuring items\")\n    itemIds = itemIds.filter(x => x !== undefined);\n    for(const itemId of itemIds){\n        setLoadoutsItemFlags(itemId, imagePath, tokenWidth, tokenHeight, tokenScale, lockOrientation, stackSize, loadoutsTag)\n    }\n    \n    ui.notifications.info(\"Loadouts: configured \" + itemIds.length + \" items for management\")\n    await new Promise(r => setTimeout(r, 500));\n    game.macros.getName(\"configureLoadoutsItems\").execute()\n\n};","flags":{"core":{"sourceId":"Macro.PsD9zZ2LoyOMqoxK"}},"_stats":{"systemId":"cyberpunk-red-core","systemVersion":"v0.87.6","coreVersion":"10.303","createdTime":1693596348647,"modifiedTime":1693682553185,"lastModifiedBy":"enbSZFWzu5dUH8Ji"},"folder":null,"sort":0,"ownership":{"default":0,"enbSZFWzu5dUH8Ji":3},"_id":"drXKh2cGu3wM3FN6"}
